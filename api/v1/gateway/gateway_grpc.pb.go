// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewaysClient is the client API for Gateways service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewaysClient interface {
	// gateway列表
	List(ctx context.Context, in *ListOption, opts ...grpc.CallOption) (*GatewayList, error)
	// 获取gateway
	Get(ctx context.Context, in *GetKind, opts ...grpc.CallOption) (*Gateway, error)
	// 创建 Gateway
	Create(ctx context.Context, in *Gateway, opts ...grpc.CallOption) (*Response, error)
	// 更新 Gateway
	Update(ctx context.Context, in *Gateway, opts ...grpc.CallOption) (*Response, error)
	// 删除gateway
	Delete(ctx context.Context, in *DeleteKind, opts ...grpc.CallOption) (*Response, error)
}

type gatewaysClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewaysClient(cc grpc.ClientConnInterface) GatewaysClient {
	return &gatewaysClient{cc}
}

func (c *gatewaysClient) List(ctx context.Context, in *ListOption, opts ...grpc.CallOption) (*GatewayList, error) {
	out := new(GatewayList)
	err := c.cc.Invoke(ctx, "/cratos.api.v1.gateway.Gateways/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewaysClient) Get(ctx context.Context, in *GetKind, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := c.cc.Invoke(ctx, "/cratos.api.v1.gateway.Gateways/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewaysClient) Create(ctx context.Context, in *Gateway, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/cratos.api.v1.gateway.Gateways/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewaysClient) Update(ctx context.Context, in *Gateway, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/cratos.api.v1.gateway.Gateways/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewaysClient) Delete(ctx context.Context, in *DeleteKind, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/cratos.api.v1.gateway.Gateways/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewaysServer is the server API for Gateways service.
// All implementations must embed UnimplementedGatewaysServer
// for forward compatibility
type GatewaysServer interface {
	// gateway列表
	List(context.Context, *ListOption) (*GatewayList, error)
	// 获取gateway
	Get(context.Context, *GetKind) (*Gateway, error)
	// 创建 Gateway
	Create(context.Context, *Gateway) (*Response, error)
	// 更新 Gateway
	Update(context.Context, *Gateway) (*Response, error)
	// 删除gateway
	Delete(context.Context, *DeleteKind) (*Response, error)
	mustEmbedUnimplementedGatewaysServer()
}

// UnimplementedGatewaysServer must be embedded to have forward compatible implementations.
type UnimplementedGatewaysServer struct {
}

func (UnimplementedGatewaysServer) List(context.Context, *ListOption) (*GatewayList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGatewaysServer) Get(context.Context, *GetKind) (*Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGatewaysServer) Create(context.Context, *Gateway) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGatewaysServer) Update(context.Context, *Gateway) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGatewaysServer) Delete(context.Context, *DeleteKind) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGatewaysServer) mustEmbedUnimplementedGatewaysServer() {}

// UnsafeGatewaysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewaysServer will
// result in compilation errors.
type UnsafeGatewaysServer interface {
	mustEmbedUnimplementedGatewaysServer()
}

func RegisterGatewaysServer(s grpc.ServiceRegistrar, srv GatewaysServer) {
	s.RegisterService(&Gateways_ServiceDesc, srv)
}

func _Gateways_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewaysServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cratos.api.v1.gateway.Gateways/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewaysServer).List(ctx, req.(*ListOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateways_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKind)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewaysServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cratos.api.v1.gateway.Gateways/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewaysServer).Get(ctx, req.(*GetKind))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateways_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Gateway)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewaysServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cratos.api.v1.gateway.Gateways/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewaysServer).Create(ctx, req.(*Gateway))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateways_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Gateway)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewaysServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cratos.api.v1.gateway.Gateways/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewaysServer).Update(ctx, req.(*Gateway))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateways_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKind)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewaysServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cratos.api.v1.gateway.Gateways/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewaysServer).Delete(ctx, req.(*DeleteKind))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateways_ServiceDesc is the grpc.ServiceDesc for Gateways service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateways_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cratos.api.v1.gateway.Gateways",
	HandlerType: (*GatewaysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Gateways_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Gateways_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Gateways_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Gateways_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Gateways_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}
