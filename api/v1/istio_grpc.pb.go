// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package book

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IstioServiceClient is the client API for IstioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IstioServiceClient interface {
	CheckInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type istioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIstioServiceClient(cc grpc.ClientConnInterface) IstioServiceClient {
	return &istioServiceClient{cc}
}

func (c *istioServiceClient) CheckInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/cratos.service.v1.IstioService/CheckInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IstioServiceServer is the server API for IstioService service.
// All implementations must embed UnimplementedIstioServiceServer
// for forward compatibility
type IstioServiceServer interface {
	CheckInfo(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedIstioServiceServer()
}

// UnimplementedIstioServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIstioServiceServer struct {
}

func (UnimplementedIstioServiceServer) CheckInfo(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInfo not implemented")
}
func (UnimplementedIstioServiceServer) mustEmbedUnimplementedIstioServiceServer() {}

// UnsafeIstioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IstioServiceServer will
// result in compilation errors.
type UnsafeIstioServiceServer interface {
	mustEmbedUnimplementedIstioServiceServer()
}

func RegisterIstioServiceServer(s grpc.ServiceRegistrar, srv IstioServiceServer) {
	s.RegisterService(&IstioService_ServiceDesc, srv)
}

func _IstioService_CheckInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IstioServiceServer).CheckInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cratos.service.v1.IstioService/CheckInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IstioServiceServer).CheckInfo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// IstioService_ServiceDesc is the grpc.ServiceDesc for IstioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IstioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cratos.service.v1.IstioService",
	HandlerType: (*IstioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckInfo",
			Handler:    _IstioService_CheckInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/istio.proto",
}
