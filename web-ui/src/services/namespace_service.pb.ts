// @ts-ignore
/* eslint-disable */
// Code generated by protoc-gen-ts-umi. DO NOT EDIT.
import {request} from 'umi';

const APIService = '/api';
// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.

type Options = {
  [key: string]: any
}

/** List  Namespace列表
 /api */
export async function List(params: CratosApiV1Namespace.ListOption, options?: Options) {
	return request<CratosApiV1Namespace.NamespaceList>(APIService + '/cratos.api.v1.Namespace/List', {
    	method: 'GET',
    	params: {...params},
    	...(options || {}),
	});
}

/** ListTags  Namespace tags
 /api */
export async function ListTags(params: CratosApiV1Namespace.ListOption, options?: Options) {
  return request<CratosApiV1Namespace.TagsList>(APIService + '/cratos.api.v1.Namespace/ListTags', {
    method: 'GET',
    params: {...params},
    ...(options || {}),
  });
}

/** Get  获取Namespace
 /api */
export async function Get(params: CratosApiV1Namespace.GetKind, options?: Options) {
	return request<K8sIoApiCoreV1.Namespace>(APIService + '/cratos.api.v1.Namespace/Get', {
    	method: 'GET',
    	params: {...params},
    	...(options || {}),
	});
}

/** Create  创建 Namespace
 /api */
export async function Create(params: K8sIoApiCoreV1.Namespace, options?: Options) {
	return request<CratosApiV1Namespace.Response>(APIService + '/cratos.api.v1.Namespace/Create', {
    	method: 'POST',
		headers: {'Content-Type': 'application/json',},
    	data: {...params},
    	...(options || {}),
	});
}

/** Update  更新 Namespace
 /api */
export async function Update(params: K8sIoApiCoreV1.Namespace, options?: Options) {
	return request<CratosApiV1Namespace.Response>(APIService + '/cratos.api.v1.Namespace/Update', {
    	method: 'POST',
		headers: {'Content-Type': 'application/json',},
    	data: {...params},
    	...(options || {}),
	});
}

/** Delete  删除Namespace
 /api */
export async function Delete(params: CratosApiV1Namespace.DeleteKind, options?: Options) {
	return request<CratosApiV1Namespace.Response>(APIService + '/cratos.api.v1.Namespace/Delete', {
    	method: 'DELETE',
    	params: {...params},
    	...(options || {}),
	});
}

